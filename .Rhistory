c("center", "center"),
c("right", "bottom")
)
)
inter <- d3tree2( p ,  rootname = "General" )
inter
p <- treemap(mh_plantations,
index=c("group","subgroup"),
vSize="acres",
type="index",
palette = "Dark2",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("right", "bottom")
)
)
inter <- d3tree2( p ,  rootname = "General" )
inter
p <- treemap(mh_plantations,
index=c("group","subgroup"),
vSize="acres",
type="index",
palette = "Set1",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("right", "bottom")
)
)
inter <- d3tree2( p ,  rootname = "General" )
inter
p <- treemap(mh_plantations,
index=c("group","subgroup"),
vSize="acres",
type="index",
palette = "Greens",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("right", "bottom")
)
)
inter <- d3tree2( p ,  rootname = "General" )
inter
library(networkD3)
# Load energy projection data
URL <- "https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- jsonlite::fromJSON(URL)
# Now we have 2 data frames: a 'links' data frame with 3 columns (from, to, value), and a 'nodes' data frame that gives the name of each node.
head( Energy$links )
head( Energy$nodes )
# Thus we can plot it
p <- sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p
View(Energy)
View(Energy)
View(inter)
View(inter)
library(dplyr)
library(networkD3)
library(tidyr)
# read in EU referendum results dataset
refresults <- read.csv("EU-referendum-result-data.csv")
# aggregate by region
results <- refresults %>%
dplyr::group_by(Region) %>%
dplyr::summarise(Remain = sum(Remain), Leave = sum(Leave))
library(dplyr)
library(networkD3)
library(tidyr)
install.packages("networkD3")
library(dplyr)
library(networkD3)
library(tidyr)
refresults <- read.csv("EU-referendum-result-data.csv")
install_github("Displayr/flipPlots")
require(devtools)
install_github("Displayr/flipPlots")
require(devtools)
install_github("Displayr/flipPlots")
require(devtools)
install_github("Displayr/flipPlots")
require(devtools)
install_github("Displayr/flipPlots")
require(devtools)
install_github("Displayr/flipPlots")
install.packages("flipPlots")
require(devtools)
install_github("Displayr/flipPlots")
require(devtools)
install_github("Displayr/flipPlots")
library(networkD3)
library(dplyr)
data.frame <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE),
fontSize = 12
p
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE)
p
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE)
p
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE)
p
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE)
p
library(networkD3)
library(dplyr)
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
library(flexdashboard)
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
library(DT)
library(plotly)
library(RColorBrewer)
library(colorRamps)
library(treemap)
library(tidyverse)
library(sunburstR)
library(igraph)
library(chorddiag)
library(tidygraph)
install.packages("rlang")
install.packages("rlang")
library(flexdashboard)
library(readr)
library(ggplot2)
library(dplyr)
library(scales)
library(DT)
library(plotly)
library(RColorBrewer)
library(colorRamps)
library(treemap)
library(tidyverse)
library(sunburstR)
library(igraph)
library(chorddiag)
library(tidygraph)
library(networkD3)
library(dplyr)
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE)
p
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
fontSize = 14)
p
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
fontSize = 14)
p
bps2evt2 <- read_csv("bps2evt2.csv")
bps2evtMatrix<-as.matrix(as_adjacency_matrix(as_tbl_graph(bps2evt2),attr = "acres"))
bps2evtMatrix = subset(bps2evtMatrix, select = -c(1,2,3,4,5,6))
bps2evtMatrix2 <- bps2evtMatrix[-c(7,8,9,10,11,12),]
groupColors <- c("#F26223", "#6c9174", "#957244", "#F26223", "#204a3e", "#97abad")
chord<-chorddiag(data = bps2evtMatrix2,
type = "bipartite",
groupColors = groupColors,
groupnamePadding = 10,
groupPadding = 3,
groupnameFontsize = 10 ,
showTicks = FALSE,
margin=150,
tooltipGroupConnector = "    &#x25B6;    ",
chordedgeColor = "#B3B6B7"
)
chord
bps2evt2 <- read_csv("bps2evt2.csv")
bps2evtMatrix<-as.matrix(as_adjacency_matrix(as_tbl_graph(bps2evt2),attr = "acres"))
bps2evtMatrix = subset(bps2evtMatrix, select = -c(1,2,3,4,5,6))
bps2evtMatrix2 <- bps2evtMatrix[-c(7,8,9,10,11,12),]
groupColors <- c("#F26223", "#6c9174", "#957244", "#F26223", "#204a3e", "#97abad")
chord<-chorddiag(data = bps2evtMatrix2,
type = "bipartite",
groupColors = groupColors,
groupnamePadding = 10,
groupPadding = 3,
groupnameFontsize = 10 ,
showTicks = FALSE,
margin=150,
tooltipGroupConnector = "    &#x25B6;    ",
chordedgeColor = "#B3B6B7"
)
chord
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
fontSize = 14)
p
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
fontSize = 14)
p
sizingPolicy(viewer.suppress = TRUE,
knitr.figure = FALSE,
browser.fill = TRUE,
browser.padding = 75,
knitr.defaultWidth = 800,
knitr.defaultHeight = 500)
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
fontSize = 14)
p
sizingPolicy(viewer.suppress = TRUE,
knitr.figure = FALSE,
browser.fill = TRUE,
browser.padding = 75,
knitr.defaultWidth = 800,
knitr.defaultHeight = 500)
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
fontSize = 14)
p
htmlwidgets::onRender()
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
fontSize = 14)
p
links <- read_csv("mh_plantations2.csv")
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
fontSize = 14)
htmlwidgets::onRender(p)
install.packages(circlepackR)
devtools::install_github("jeromefroe/circlepackeR")
data <- data.frame(
root=rep("root", 15),
group=c(rep("group A",5), rep("group B",5), rep("group C",5)),
subgroup= rep(letters[1:5], each=3),
subsubgroup=rep(letters[1:3], 5),
value=sample(seq(1:15), 15)
)
View(data)
View(data)
install.packages("data.tree")
library(data.tree)
data$pathString <- paste("world", data$group, data$subgroup, data$subsubgroup, sep = "/")
population <- as.Node(data)
library(data.tree)
data$pathString <- paste("world", data$group, data$subgroup, data$subsubgroup, sep = "/")
population <- as.Node(data)
View(data)
library(data.tree)
data$pathString <- paste("world", data$group, data$subgroup, data$subsubgroup, sep = "/")
population <- as.Node(data)
p <- circlepackeR(population, size = "value", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
p
pC <- circlepackeR(population, size = "value", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
library(circlepackeR)
pC <- circlepackeR(population, size = "value", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
pC
circle <- read_csv("circle.csv")
circle <- read_csv("circle.csv")
View(circle)
View(circle)
library(data.tree)
circle$pathString <- paste("world", circle$group, circle$subgroup, sep = "/")
population <- as.Node(circle)
mh_circle <- circlepackeR(population, size = "value", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
mh_circle
circle <- read_csv("circle.csv")
library(data.tree)
circle$pathString <- paste("world", circle$group, circle$subgroup, sep = "/")
population <- as.Node(circle)
mh_circle <- circlepackeR(population, size = "value", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
mh_circle
circle <- read_csv("circle.csv")
library(data.tree)
circle$pathString <- paste("world", circle$group, circle$subgroup, sep = "/")
population <- as.Node(circle)
mh_circle <- circlepackeR(population, size = "value", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
mh_circle
circle <- read_csv("circle.csv")
library(circlepackeR)
library(data.tree)
circle$pathString <- paste("world", circle$group, circle$subgroup, sep = "/")
population <- as.Node(circle)
mh_circle <- circlepackeR(population, size = "value", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
mh_circle
